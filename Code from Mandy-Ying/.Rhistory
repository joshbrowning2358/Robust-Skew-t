sum(colw$weights)
n
S^2
S = sqrt(1/(n-1)*sum((Z-Zbar)^2) )
S
sd(Z)
colw <- nb2listw(col.gal.nb, style="W")
nsim <- 99
set.seed(1234)
sim1 <- moran.mc(columbus$CRIME, listw=colw, nsim=nsim)
sim1
sum(sim1$res<sim1$res[100])
n = length(nb)
Z = columbus@data$CRIME
Zbar = mean(Z)
U = matrix(Z-Zbar, nrow=n, ncol=n, byrow=T)*
matrix(Z-Zbar, nrow=n, ncol=n, byrow=F)
i=1
neigh = colw$neighbours[[i]]
wt = colw$weights[[i]]
neigh
wt
Z[neigh]
wt
i=5
neigh = colw$neighbours[[i]]
neigh
wt = colw$weights[[i]]
Z[neigh]
wt
wt
Z
I = sapply(1:n, function(i){
neigh = colw$neighbours[[i]]
wt = colw$weights[[i]]
Z[neigh]%*%wt
} )
I = n/(n-1)/S^2*sum(I)/do.call("sum", colw$weights)
I
mu0 = -1/(n-1)
mu0
S0 = do.call("sum", colw$weights)
S0
as.matrix(colw)
is(colw)
?nb2listw
moran.test
?moran.test
Z
moran.test(Z, listw=colw, randomisation=FALSE)
I = sapply(1:n, function(i){
neigh = colw$neighbours[[i]]
wt = colw$weights[[i]]
(Z[neigh]-Zbar)%*%(wt*(Z[i]-Zbar))
} )
I = n/do.call("sum", colw$weights)*sum(I)/(S^2*(n-1))
I
mu0 = -1/(n-1)
S0 = do.call("sum", colw$weights)
W = matrix(0)
moran.test(Z, listw=colw, randomisation=FALSE)
W = matrix(0,nr=n,nc=n)
W
colw$neighbors[[i]]
i
colw$neighbors
colw$neighbours
colw$neighbours[[i]]
W[i,colw$neighbours[[i]]]
W[i,colw$neighbours[[i]]] = colw$weights[[i]]
for(i in 1:n)
W[i,colw$neighbours[[i]]] = colw$weights[[i]]
I = n/sum(W)*sum(I)/(S^2*(n-1))
I
do.call("sum", colw$weights)
sum(W)
I = sapply(1:n, function(i){
neigh = colw$neighbours[[i]]
wt = colw$weights[[i]]
(Z[neigh]-Zbar)%*%(wt*(Z[i]-Zbar))
} )
I = n/do.call("sum", colw$weights)*sum(I)/(S^2*(n-1))
I
S0 = sum(W)
S0
S1 = 1/2*sum((W+t(W))^2)
S1
rowSums(W)
colSums(W)
sum((rowSums(W) + colSums(W))^2)
S2 = sum((rowSums(W) + colSums(W))^2)
moran.test(Z, listw=colw, randomisation=FALSE)
sum(W)
n=49
#Local Moran's I
loc.sim=localmoran(columbus$CRIME, listw=colw)
loc.sim
plot( loc.sim )
columbus2=columbus
columbus2@data=cbind(columbus@data,loc.sim[,5],pvals)
spplot(columbus2,"loc.sim[, 5]",main="Local Moran's I P-Values")
loc.sim=localmoran(columbus$CRIME, listw=colw)
loc.sim
loc.sim[,5]
pvals=rep(1,n)
alpha=0.01
pvals[which(loc.sim[,5]<alpha)]=rep(0, length(which(loc.sim[,5]<alpha)))
columbus2=columbus
columbus2@data=cbind(columbus@data,loc.sim[,5],pvals)
spplot(columbus2,"loc.sim[, 5]",main="Local Moran's I P-Values")
spplot(columbus2,"pvals",main="Significant Local Moran's I P-Values")
spplot(columbus2,"loc.sim[, 5]",main="Local Moran's I P-Values")
?localmoran
head( loc.sim )
(0.7368+0.020833)/sqrt(0.4769)
loc.sim
pvals=rep(1,n)
alpha=0.01
which(loc.sim[,5]<alpha)
pvals = as.numeric( loc.sim[,5]<alpha )
pvals
pvals=rep(1,n)
alpha=0.01
pvals[which(loc.sim[,5]<alpha)]=rep(0, length(which(loc.sim[,5]<alpha)))
pvals
pvals = as.numeric( loc.sim[,5]>alpha )
pvals = as.numeric( loc.sim[,5]>=alpha )
pvals
install.packages("gmailR")
install.packages("gmailr")
?gmailr
?gmailR
??gmailR
install.packages("sendmailR")
library(sendmailR)
?sendmailR
??sendmailR
sendmail(from="rockclimber112358@gmail.com", to="rockclimber112358@gmail.com", subject="Test")
columbus2=columbus
columbus2@data=cbind(columbus@data,loc.sim[,5],pvals)
pvals
head(toPlot)
head(pvals)
is(loc.sim)
loc.sim$id = 1:49
loc.sim = data.frame(loc.sim)
loc.sim$id = 1:49
loc.sim=localmoran(columbus$CRIME, listw=colw)
loc.sim = data.frame(loc.sim)
loc.sim$id = 1:49
head(loc.sim)
merge( toPlot, loc.sim, by="id")
dim( merge( toPlot, loc.sim, by="id") )
dim( toPlot )
toPlot = dim( merge( toPlot, loc.sim, by="id") )
colnames(toPlot)
toPlot = fortify(columbus, region="POLYID")
toPlot = toPlot[order(toPlot$id),]
toPlot$id = as.numeric(toPlot$id)
toPlot = merge(toPlot, columbus@data, by.x="id", by.y="POLYID")
toPlot = merge(toPlot, conn)
toPlot = merge( toPlot, loc.sim, by="id")
ggplot(toPlot, aes_string(x="long", y="lat", group="group", fill=)) +
geom_polygon() + theme_bw() + labs(title=titles[i])
colnames(toPlot)
ggplot(toPlot, aes(x=long, y=lat, group=group, fill=Pr.z...0.)) +
geom_polygon() + theme_bw() + labs(title=titles[i])
ggplot(toPlot, aes(x=long, y=lat, group=group, fill=Pr.z...0.)) +
geom_polygon() + theme_bw() + labs(title="P-values", fill="P-values")
ggplot(toPlot, aes(x=long, y=lat, group=group, fill=Pr.z...0.>alpha)) +
geom_polygon() + theme_bw() + labs(title="P-values", fill="P-values")
spplot(columbus2,"pvals",main="Significant Local Moran's I P-Values")
ggplot(toPlot, aes(x=long, y=lat, group=group, fill=Pr.z...0.<alpha)) +
geom_polygon() + theme_bw() +
labs(title="Significant Local Morans' I P-values", fill="Significant?")
ggplot(toPlot, aes(x=long, y=lat, group=group, fill=Pr.z...0.<alpha)) +
geom_polygon() + theme_bw() +
labs(title="Significant Local Morans' I P-values", fill="Significant?")
table(pvals)
sum(pvals)
sum(1-pvals)
data(columbus)
colnames(columbus)
#Polygon Shape File (.shp)
columbus=readShapePoly(system.file("etc/shapes/columbus.shp", package="spdep"[1]))
#Convert to data.frame for plotting
toPlot = fortify(columbus, region="POLYID")
toPlot = toPlot[order(toPlot$id),]
head(toPlot); dim(toPlot)
p = qmap("Columbus", zoom=12)
p + geom_polygon(data=toPlot, aes(x=long, y=lat, group=group))
S2 = sum((rowSums(W) + colSums(W))^2)
n = length(nb)
Z = columbus@data$CRIME
Zbar = mean(Z)
U = matrix(Z-Zbar, nrow=n, ncol=n, byrow=T)*
matrix(Z-Zbar, nrow=n, ncol=n, byrow=F)
W = matrix(0,nr=n,nc=n)
for(i in 1:n)
W[i,colw$neighbours[[i]]] = colw$weights[[i]]
S = sd(Z)
I = sapply(1:n, function(i){
neigh = colw$neighbours[[i]]
wt = colw$weights[[i]]
(Z[neigh]-Zbar)%*%(wt*(Z[i]-Zbar))
} )
I = n/sum(W)*sum(I)/(S^2*(n-1))
I
mu0 = -1/(n-1)
S0 = sum(W)
S1 = 1/2*sum((W+t(W))^2)
S2 = sum((rowSums(W) + colSums(W))^2)
sigma0 = (n^2*S1-n*S2+3*S0^2)/((n-1)*(n+1)*S0^2) - (1/(n+1))^2
sigma0
(I-mu0)/sigma0
pval = pnorm((I-mu0)/sigma0); pval
pval = 1-pnorm((I-mu0)/sigma0); pval
pval
moran.test(Z, listw=colw, randomisation=FALSE)
sigma0
sigma0 = sqrt( (n^2*S1-n*S2+3*S0^2)/((n-1)*(n+1)*S0^2) - (1/(n+1))^2 )
pval = 1-pnorm((I-mu0)/sigma0); pval
mu0
sigma0
pval = 1-pnorm((I-mu0)/sigma0); pval
(I-mu0)/sigma0
nsim <- 9999
set.seed(1234)
sim1 <- moran.mc(columbus$CRIME, listw=colw, nsim=nsim)
sim1
nsim <- 99999
set.seed(1234)
sim1 <- moran.mc(columbus$CRIME, listw=colw, nsim=nsim)
sim1
columbus@data
nrow(columbus@data)
getwd()
setwd("Professional Files/Mines/Research/Robust Estimators/Code/Code from Mandy-Ying/")
args = c(1, .1, 1, 8)
if(length(args)!=4)
stop("Exactly four argument should be provided!")
args = as.numeric(args)
mod = args[1]
p.out = args[2]
out.method = args[3]
kVal = args[4]
if(! mod %in% 1:5)
stop("Model number must be in 1:5!")
if(p.out>1 | p.out<0)
stop("p.out must be between 0 and 1!")
if(!out.method %in% 1:3)
stop("out.method must be in 1:3!")
if(!is.numeric(kVal))
stop("kVal must be numeric!")
library(mnormt)
source('robustBST.R')
source('model.R')
source('methoddp.R')
xi=c(3.5732607, 10.3322993, 13.0043508, 16.5135646, 19.0336571, 20.8985299, 11.4608094, 5.2606013, -1.0291708, -2.2748794, -1.7431219, -1.2281764, -0.9888074, -0.4555666, -0.7184110, -0.9835646)
names(xi)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
omega=rbind( c(22.3972699, 13.984818,  16.039642,  17.684241,  18.63175,  18.346261, 10.4795136,  8.2677082, -3.9072388, -10.004767, -10.995055, -13.833277, -13.634031, -10.2153270, -2.815235, -0.5339653), c(13.9848178, 53.727990,  59.020103,  66.056794,  66.75493,  59.537442, 23.6810410, 14.8809412,  5.5295733,   3.477148,   6.406637,   8.474633,   9.738715,  11.3172025,  4.378073,  3.3395517), c(16.0396421, 59.020103,  90.528398, 102.709659, 103.20949,  88.314971, 30.7581432, 17.6257511,  9.3983732,  11.193745,  17.330145,  24.295520,  26.207537,  25.1415773,  8.529959,  6.3410444), c(17.6842407, 66.056794, 102.709659, 147.899721, 148.89594, 124.512607, 38.0446733, 19.9519976, 12.4206720,  18.832824,  27.023667,  38.891596,  42.174570,  38.6743609, 12.975820,  8.9548713), c(18.6317507, 66.754935, 103.209486, 148.895942, 171.79385, 145.080702, 43.3933979, 22.0252564, 12.3625644,  19.464066,  27.533566,  40.567982,  44.611103,  40.2599930, 13.941600,  9.4114303), c(18.3462610, 59.537442,  88.314971, 124.512607, 145.08070, 149.877677, 46.6103745, 24.3935571, 10.9785169,  14.172450,  21.046724,  30.593732,  35.229002,  33.2482152, 10.321343,  7.7821568), c(10.4795136, 23.681041,  30.758143,  38.044673,  43.39340,  46.610374, 51.6696619, 33.6064021,  0.1524421,  -4.419451,  -4.078705,  -3.998690,  -3.327270,  -0.0476168, -1.178374,  1.0679616), c( 8.2677082, 14.880941,  17.625751,  19.951998,  22.02526,  24.393557, 33.6064021, 40.3398453, -2.7411404,  -7.184680,  -7.805223,  -9.335120,  -9.578368,  -5.4294290, -2.678479, -0.6314295), c(-3.9072388,  5.529573,   9.398373,  12.420672,  12.36256,  10.978517,  0.1524421, -2.7411404, 25.9163894,  27.043738,  30.793393,  37.083542,  38.886431,  35.2738880, 13.268837,  6.7957864),c(-10.0047669,  3.477148,  11.193745,  18.832824,  19.46407,  14.172450, -4.4194513, -7.1846796, 27.0437381,  78.522421,  90.324931, 108.070579, 112.710362, 100.0875035, 36.757158, 17.5988472),c(-10.9950547,  6.406637,  17.330145,  27.023667,  27.53357,  21.046724, -4.0787046, -7.8052225, 30.7933930,  90.324931, 126.802112, 151.111722, 155.933320, 135.8397389, 47.631396, 22.8484928),c(-13.8332773,  8.474633,  24.295520,  38.891596,  40.56798,  30.593732, -3.9986897, -9.3351204, 37.0835417, 108.070579, 151.111722, 209.976779, 215.636087, 185.3566163, 62.552556, 29.9704567),c(-13.6340314,  9.738715,  26.207537,  42.174570,  44.61110,  35.229002, -3.3272702, -9.5783683, 38.8864311, 112.710362, 155.933320, 215.636087, 242.728801, 208.9461148, 70.680936, 33.6640122),c(-10.2153270, 11.317202,  25.141577,  38.674361,  40.25999,  33.248215, -0.0476168, -5.4294290, 35.2738880, 100.087504, 135.839739, 185.356616, 208.946115, 208.5533958, 72.232734, 34.7282020), c(-2.8152352,  4.378073,   8.529959,  12.975820,  13.94160,  10.321343, -1.1783744, -2.6784786, 13.2688371,  36.757158,  47.631396,  62.552556,  70.680936,  72.2327344, 46.452689, 21.1557030), c(-0.5339653,  3.339552,   6.341044,   8.954871,   9.41143,   7.782157,  1.0679616, -0.6314295,  6.7957864,  17.598847,  22.848493,  29.970457,  33.664012,  34.7282020, 21.155703, 18.8168900))
colnames(omega)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
rownames(omega)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
#Constructing an omega that is perfectly symmetric.  omega above fails the symmetry test because of round-off error.
UT=upper.tri(omega)
omega2=matrix(0,nrow=nrow(omega),ncol=ncol(omega))
omega2[UT]=omega[UT]
omega2=omega2+t(omega2)
diag(omega2)=diag(omega)
cat("Eigenvalues of omega2:")
eigen(omega2)$values
#Values based on those observed at Denver Station
alpha.obs=c(2.16,  1.44,  1.35,  0.95,  0.60,  0.31,  2.62,  3.02, -0.03, -0.81, -0.82, -0.89, -0.82, -0.75, -0.31,  0.39 )
#alpha.obs=c(0.09, -0.07,  0.13, -0.25,  0.18, -0.08, -0.04,  0.00, -0.09,  0.11,  0.02, -0.08, -0.03,  0.07,  0.07, -0.10)
df.obs=10
#Values for a MVN distribution
alpha.MVN=rep(0,16)
df.MVN=Inf
#Values for distributions that are more skewed than what was observed at the Denver Station
alpha.EX=c(3:10,3:10)
df.EX=5
skew3=cbind(alpha.MVN,alpha.obs,alpha.EX)
df3=c(df.MVN,df.obs,df.EX)
#Sample sizes to loop over
nsim=1000
set.seed(10)
n=500
p=8
#sig level
aa=0.025
table=NULL
tablesd=NULL
conv=NULL
nsim = 1
start = Sys.time()
#for (mm in 1:3){
mm = out.method
tab=NULL
for(j in 1:nsim){
alpha=skew3[,mm]
df=df3[mm]
#model 1: no outliers
if(mod==1){
uv=m1(n,p,xi,omega2,alpha,df)
u=uv$u
v=uv$v
#Biv skew-t estimation
fit = mst.robust(u,v,af=aa, k=kVal)
rw=tp(fit$out)
} else {
#model 2-5: outlier models
k=6
l=4
std=sqrt(diag(omega2))
kmat=cbind(matrix(std[1:p],p,n),matrix(std[(p+1):(2*p)],p,n))
kk=k*kmat
if(mod==2)
uv=m2(n,p,xi,omega2,alpha,df,p.out,kk) #at all levels
if(mod==3)
uv=m3(n,p,xi,omega2,alpha,df,p.out,kk) # random higher levels
if(mod==4)
uv=m4(n,p,xi,omega2,alpha,df,p.out,kk,l) # random 4 levels
if(mod==5)
uv=m5(n,p,xi,omega2,alpha,df,p.out) #flip all levels
u=uv$u
v=uv$v
out=uv$outlier #for model 2-5
#Biv ST robust estimation
fit = mst.robust2(u,v,af=aa)
rw=tpfp(fit$out,out)
}
tab=rbind(tab,rw)
conv=rbind(conv,fit$convergence)
if(j %% 10==0 )
save(tab, conv, file=paste0("simulation_j_",j,"_mm_",mm,"_mod_",mod,"_pout_",p.out,"_out_",out.method,".RData"))
diffT = as.numeric(difftime(Sys.time(),start, units="min"))
cat("Simulation completed: j=",j,"  mm=",mm,"  mod=",mod,"  time=",round(diffT,2),"min.\n", sep="")
}
percent=apply(tab,2,mean)
percentsd=apply(tab,2,sd)
table=rbind(table,percent)
tablesd=rbind(tablesd,percentsd)
#}
args = c(1, .1, 1, 12)
if(length(args)!=4)
stop("Exactly four argument should be provided!")
args = as.numeric(args)
mod = args[1]
p.out = args[2]
out.method = args[3]
kVal = args[4]
if(! mod %in% 1:5)
stop("Model number must be in 1:5!")
if(p.out>1 | p.out<0)
stop("p.out must be between 0 and 1!")
if(!out.method %in% 1:3)
stop("out.method must be in 1:3!")
if(!is.numeric(kVal))
stop("kVal must be numeric!")
library(mnormt)
source('robustBST.R')
source('model.R')
source('methoddp.R')
##########parameters
xi=c(3.5732607, 10.3322993, 13.0043508, 16.5135646, 19.0336571, 20.8985299, 11.4608094, 5.2606013, -1.0291708, -2.2748794, -1.7431219, -1.2281764, -0.9888074, -0.4555666, -0.7184110, -0.9835646)
names(xi)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
omega=rbind( c(22.3972699, 13.984818,  16.039642,  17.684241,  18.63175,  18.346261, 10.4795136,  8.2677082, -3.9072388, -10.004767, -10.995055, -13.833277, -13.634031, -10.2153270, -2.815235, -0.5339653), c(13.9848178, 53.727990,  59.020103,  66.056794,  66.75493,  59.537442, 23.6810410, 14.8809412,  5.5295733,   3.477148,   6.406637,   8.474633,   9.738715,  11.3172025,  4.378073,  3.3395517), c(16.0396421, 59.020103,  90.528398, 102.709659, 103.20949,  88.314971, 30.7581432, 17.6257511,  9.3983732,  11.193745,  17.330145,  24.295520,  26.207537,  25.1415773,  8.529959,  6.3410444), c(17.6842407, 66.056794, 102.709659, 147.899721, 148.89594, 124.512607, 38.0446733, 19.9519976, 12.4206720,  18.832824,  27.023667,  38.891596,  42.174570,  38.6743609, 12.975820,  8.9548713), c(18.6317507, 66.754935, 103.209486, 148.895942, 171.79385, 145.080702, 43.3933979, 22.0252564, 12.3625644,  19.464066,  27.533566,  40.567982,  44.611103,  40.2599930, 13.941600,  9.4114303), c(18.3462610, 59.537442,  88.314971, 124.512607, 145.08070, 149.877677, 46.6103745, 24.3935571, 10.9785169,  14.172450,  21.046724,  30.593732,  35.229002,  33.2482152, 10.321343,  7.7821568), c(10.4795136, 23.681041,  30.758143,  38.044673,  43.39340,  46.610374, 51.6696619, 33.6064021,  0.1524421,  -4.419451,  -4.078705,  -3.998690,  -3.327270,  -0.0476168, -1.178374,  1.0679616), c( 8.2677082, 14.880941,  17.625751,  19.951998,  22.02526,  24.393557, 33.6064021, 40.3398453, -2.7411404,  -7.184680,  -7.805223,  -9.335120,  -9.578368,  -5.4294290, -2.678479, -0.6314295), c(-3.9072388,  5.529573,   9.398373,  12.420672,  12.36256,  10.978517,  0.1524421, -2.7411404, 25.9163894,  27.043738,  30.793393,  37.083542,  38.886431,  35.2738880, 13.268837,  6.7957864),c(-10.0047669,  3.477148,  11.193745,  18.832824,  19.46407,  14.172450, -4.4194513, -7.1846796, 27.0437381,  78.522421,  90.324931, 108.070579, 112.710362, 100.0875035, 36.757158, 17.5988472),c(-10.9950547,  6.406637,  17.330145,  27.023667,  27.53357,  21.046724, -4.0787046, -7.8052225, 30.7933930,  90.324931, 126.802112, 151.111722, 155.933320, 135.8397389, 47.631396, 22.8484928),c(-13.8332773,  8.474633,  24.295520,  38.891596,  40.56798,  30.593732, -3.9986897, -9.3351204, 37.0835417, 108.070579, 151.111722, 209.976779, 215.636087, 185.3566163, 62.552556, 29.9704567),c(-13.6340314,  9.738715,  26.207537,  42.174570,  44.61110,  35.229002, -3.3272702, -9.5783683, 38.8864311, 112.710362, 155.933320, 215.636087, 242.728801, 208.9461148, 70.680936, 33.6640122),c(-10.2153270, 11.317202,  25.141577,  38.674361,  40.25999,  33.248215, -0.0476168, -5.4294290, 35.2738880, 100.087504, 135.839739, 185.356616, 208.946115, 208.5533958, 72.232734, 34.7282020), c(-2.8152352,  4.378073,   8.529959,  12.975820,  13.94160,  10.321343, -1.1783744, -2.6784786, 13.2688371,  36.757158,  47.631396,  62.552556,  70.680936,  72.2327344, 46.452689, 21.1557030), c(-0.5339653,  3.339552,   6.341044,   8.954871,   9.41143,   7.782157,  1.0679616, -0.6314295,  6.7957864,  17.598847,  22.848493,  29.970457,  33.664012,  34.7282020, 21.155703, 18.8168900))
colnames(omega)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
rownames(omega)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
#Constructing an omega that is perfectly symmetric.  omega above fails the symmetry test because of round-off error.
UT=upper.tri(omega)
omega2=matrix(0,nrow=nrow(omega),ncol=ncol(omega))
omega2[UT]=omega[UT]
omega2=omega2+t(omega2)
diag(omega2)=diag(omega)
cat("Eigenvalues of omega2:")
eigen(omega2)$values
#Values based on those observed at Denver Station
alpha.obs=c(2.16,  1.44,  1.35,  0.95,  0.60,  0.31,  2.62,  3.02, -0.03, -0.81, -0.82, -0.89, -0.82, -0.75, -0.31,  0.39 )
#alpha.obs=c(0.09, -0.07,  0.13, -0.25,  0.18, -0.08, -0.04,  0.00, -0.09,  0.11,  0.02, -0.08, -0.03,  0.07,  0.07, -0.10)
df.obs=10
#Values for a MVN distribution
alpha.MVN=rep(0,16)
df.MVN=Inf
#Values for distributions that are more skewed than what was observed at the Denver Station
alpha.EX=c(3:10,3:10)
df.EX=5
skew3=cbind(alpha.MVN,alpha.obs,alpha.EX)
df3=c(df.MVN,df.obs,df.EX)
#Sample sizes to loop over
nsim=1000
set.seed(10)
n=500
p=8
#sig level
aa=0.025
table=NULL
tablesd=NULL
conv=NULL
# 3 sets of parameters
start = Sys.time()
#for (mm in 1:3){
mm = out.method
tab=NULL
nsim=1
for(j in 1:nsim){
alpha=skew3[,mm]
df=df3[mm]
#model 1: no outliers
if(mod==1){
uv=m1(n,p,xi,omega2,alpha,df)
u=uv$u
v=uv$v
#Biv skew-t estimation
fit = mst.robust(u,v,af=aa, k=kVal)
rw=tp(fit$out)
} else {
#model 2-5: outlier models
k=6
l=4
std=sqrt(diag(omega2))
kmat=cbind(matrix(std[1:p],p,n),matrix(std[(p+1):(2*p)],p,n))
kk=k*kmat
if(mod==2)
uv=m2(n,p,xi,omega2,alpha,df,p.out,kk) #at all levels
if(mod==3)
uv=m3(n,p,xi,omega2,alpha,df,p.out,kk) # random higher levels
if(mod==4)
uv=m4(n,p,xi,omega2,alpha,df,p.out,kk,l) # random 4 levels
if(mod==5)
uv=m5(n,p,xi,omega2,alpha,df,p.out) #flip all levels
u=uv$u
v=uv$v
out=uv$outlier #for model 2-5
#Biv ST robust estimation
fit = mst.robust2(u,v,af=aa)
rw=tpfp(fit$out,out)
}
tab=rbind(tab,rw)
conv=rbind(conv,fit$convergence)
if(j %% 10==0 )
save(tab, conv, file=paste0("simulation_j_",j,"_mm_",mm,"_mod_",mod,"_pout_",p.out,"_out_",out.method,".RData"))
diffT = as.numeric(difftime(Sys.time(),start, units="min"))
cat("Simulation completed: j=",j,"  mm=",mm,"  mod=",mod,"  time=",round(diffT,2),"min.\n", sep="")
}
args = commandArgs(trailingOnly=TRUE)
#args = c(1, .1, 1, 12)
if(length(args)!=4)
stop("Exactly four argument should be provided!")
args = as.numeric(args)
mod = args[1]
p.out = args[2]
out.method = args[3]
kVal = args[4]
if(! mod %in% 1:5)
stop("Model number must be in 1:5!")
if(p.out>1 | p.out<0)
stop("p.out must be between 0 and 1!")
if(!out.method %in% 1:3)
stop("out.method must be in 1:3!")
if(!is.numeric(kVal))
stop("kVal must be numeric!")
##simulation examples
library(mnormt)
source('robustBST.R')
source('model.R')
source('methoddp.R')
##########parameters
xi=c(3.5732607, 10.3322993, 13.0043508, 16.5135646, 19.0336571, 20.8985299, 11.4608094, 5.2606013, -1.0291708, -2.2748794, -1.7431219, -1.2281764, -0.9888074, -0.4555666, -0.7184110, -0.9835646)
names(xi)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
omega=rbind( c(22.3972699, 13.984818,  16.039642,  17.684241,  18.63175,  18.346261, 10.4795136,  8.2677082, -3.9072388, -10.004767, -10.995055, -13.833277, -13.634031, -10.2153270, -2.815235, -0.5339653), c(13.9848178, 53.727990,  59.020103,  66.056794,  66.75493,  59.537442, 23.6810410, 14.8809412,  5.5295733,   3.477148,   6.406637,   8.474633,   9.738715,  11.3172025,  4.378073,  3.3395517), c(16.0396421, 59.020103,  90.528398, 102.709659, 103.20949,  88.314971, 30.7581432, 17.6257511,  9.3983732,  11.193745,  17.330145,  24.295520,  26.207537,  25.1415773,  8.529959,  6.3410444), c(17.6842407, 66.056794, 102.709659, 147.899721, 148.89594, 124.512607, 38.0446733, 19.9519976, 12.4206720,  18.832824,  27.023667,  38.891596,  42.174570,  38.6743609, 12.975820,  8.9548713), c(18.6317507, 66.754935, 103.209486, 148.895942, 171.79385, 145.080702, 43.3933979, 22.0252564, 12.3625644,  19.464066,  27.533566,  40.567982,  44.611103,  40.2599930, 13.941600,  9.4114303), c(18.3462610, 59.537442,  88.314971, 124.512607, 145.08070, 149.877677, 46.6103745, 24.3935571, 10.9785169,  14.172450,  21.046724,  30.593732,  35.229002,  33.2482152, 10.321343,  7.7821568), c(10.4795136, 23.681041,  30.758143,  38.044673,  43.39340,  46.610374, 51.6696619, 33.6064021,  0.1524421,  -4.419451,  -4.078705,  -3.998690,  -3.327270,  -0.0476168, -1.178374,  1.0679616), c( 8.2677082, 14.880941,  17.625751,  19.951998,  22.02526,  24.393557, 33.6064021, 40.3398453, -2.7411404,  -7.184680,  -7.805223,  -9.335120,  -9.578368,  -5.4294290, -2.678479, -0.6314295), c(-3.9072388,  5.529573,   9.398373,  12.420672,  12.36256,  10.978517,  0.1524421, -2.7411404, 25.9163894,  27.043738,  30.793393,  37.083542,  38.886431,  35.2738880, 13.268837,  6.7957864),c(-10.0047669,  3.477148,  11.193745,  18.832824,  19.46407,  14.172450, -4.4194513, -7.1846796, 27.0437381,  78.522421,  90.324931, 108.070579, 112.710362, 100.0875035, 36.757158, 17.5988472),c(-10.9950547,  6.406637,  17.330145,  27.023667,  27.53357,  21.046724, -4.0787046, -7.8052225, 30.7933930,  90.324931, 126.802112, 151.111722, 155.933320, 135.8397389, 47.631396, 22.8484928),c(-13.8332773,  8.474633,  24.295520,  38.891596,  40.56798,  30.593732, -3.9986897, -9.3351204, 37.0835417, 108.070579, 151.111722, 209.976779, 215.636087, 185.3566163, 62.552556, 29.9704567),c(-13.6340314,  9.738715,  26.207537,  42.174570,  44.61110,  35.229002, -3.3272702, -9.5783683, 38.8864311, 112.710362, 155.933320, 215.636087, 242.728801, 208.9461148, 70.680936, 33.6640122),c(-10.2153270, 11.317202,  25.141577,  38.674361,  40.25999,  33.248215, -0.0476168, -5.4294290, 35.2738880, 100.087504, 135.839739, 185.356616, 208.946115, 208.5533958, 72.232734, 34.7282020), c(-2.8152352,  4.378073,   8.529959,  12.975820,  13.94160,  10.321343, -1.1783744, -2.6784786, 13.2688371,  36.757158,  47.631396,  62.552556,  70.680936,  72.2327344, 46.452689, 21.1557030), c(-0.5339653,  3.339552,   6.341044,   8.954871,   9.41143,   7.782157,  1.0679616, -0.6314295,  6.7957864,  17.598847,  22.848493,  29.970457,  33.664012,  34.7282020, 21.155703, 18.8168900))
colnames(omega)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
rownames(omega)=c("u700", "u500", "u400", "u300", "u250", "u200", "u100", "u70",  "v700", "v500", "v400", "v300", "v250", "v200", "v100", "v70" )
#Constructing an omega that is perfectly symmetric.  omega above fails the symmetry test because of round-off error.
UT=upper.tri(omega)
omega2=matrix(0,nrow=nrow(omega),ncol=ncol(omega))
omega2[UT]=omega[UT]
omega2=omega2+t(omega2)
diag(omega2)=diag(omega)
cat("Eigenvalues of omega2:")
eigen(omega2)$values
#Values based on those observed at Denver Station
alpha.obs=c(2.16,  1.44,  1.35,  0.95,  0.60,  0.31,  2.62,  3.02, -0.03, -0.81, -0.82, -0.89, -0.82, -0.75, -0.31,  0.39 )
#alpha.obs=c(0.09, -0.07,  0.13, -0.25,  0.18, -0.08, -0.04,  0.00, -0.09,  0.11,  0.02, -0.08, -0.03,  0.07,  0.07, -0.10)
df.obs=10
#Values for a MVN distribution
alpha.MVN=rep(0,16)
df.MVN=Inf
#Values for distributions that are more skewed than what was observed at the Denver Station
alpha.EX=c(3:10,3:10)
df.EX=5
skew3=cbind(alpha.MVN,alpha.obs,alpha.EX)
df3=c(df.MVN,df.obs,df.EX)
#Sample sizes to loop over
nsim=1000
set.seed(10)
n=500
p=8
#sig level
aa=0.025
table=NULL
tablesd=NULL
conv=NULL
# 3 sets of parameters
start = Sys.time()
#for (mm in 1:3){
mm = out.method
tab=NULL
source('~/Professional Files/Mines/Research/Robust Estimators/Code/Code from Mandy-Ying/simexample.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Professional Files/Mines/Research/Robust Estimators/Code/Code from Mandy-Ying/simexample.R', echo=TRUE)
