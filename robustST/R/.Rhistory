if(Sys.info()[1]=="Linux" & grepl("(ch120|bb136)",Sys.info()[4]) ){
setwd("~/Research/Wind_QC")
source("Code/simulation_functions.R")
source("~/Github/Stan-Norm-Hom-Test/snht/R/robustSNHT.R")
source("~/Github/Stan-Norm-Hom-Test/snht/R/robustSNHTunequal.R")
source("~/Github/Stan-Norm-Hom-Test/snht/R/snht.R")
}
if(Sys.info()[1]=="Linux" & Sys.info()[4]=="jb" ){
setwd("/media/storage/Professional Files/Mines/Research/Wind QC")
source("Code/simulation_functions.R")
source("/media/storage/Github/Stan-Norm-Hom-Test/snht/R/robustSNHT.R")
source("/media/storage/Github/Stan-Norm-Hom-Test/snht/R/robustSNHTunequal.R")
source("/media/storage/Github/Stan-Norm-Hom-Test/snht/R/snht.R")
}
test.data = read.csv(file=paste("Data/uadb", dataset, station, "parsed_temp_cleaned.csv", sep="_") )
test.data = test.data[test.data$Pressure==pressure,]
test.data$Pressure = NULL
colnames(test.data)=c("Year","Month","Day","Hour","Reading")
test.data$Date = as.Date( paste(test.data$Year, test.data$Month, test.data$Day), format="%Y %m %d")
test.data$Day_Of_Year = as.numeric( as.character( test.data$Date, format="%j" ) )
#Replace -999 with NA for temperature:
test.data$Reading[test.data$Reading==-999] = NA
source("Code/simulation_functions.R")
type1 = data.frame(type=c("BinSeg"), stringsAsFactors=F)
type1 = merge(type1, data.frame(Q=1:10, pen.value="log(n)"))
type2 = data.frame(type="PELT", Q=1 )
type2 = merge(type2, data.frame(pen.value=c("n/2","n","2*n","4*n","8*n")))
if(useRobust=="Y"){
type = rbind(type1, type2)
type$pen.value = as.character(type$pen.value)
type = rbind(type, c("SNHT", 365, NA), c("robust", 365, NA), c("SNHT", 365*2, NA), c("robust", 365*2, NA))
type$pen.value = factor(type$pen.value)
}
type = rbind(type1, type2)
type$pen.value = as.character(type$pen.value)
type = rbind(type, c("SNHT", 365, NA), c("robust", 365, NA), c("SNHT", 365*2, NA), c("robust", 365*2, NA))
type$pen.value = factor(type$pen.value)
type$Q = as.numeric( type$Q )
type = merge(type, data.frame(new=c(TRUE,FALSE)))
type
newParams
source("~/GitHub/Italian/runVocab.R")
data = data.frame(c("A", "B", "C", "D"))
data
data = data.frame(Source = c("A", "B", "C", "D"))
data = merge(data, data, by = "")
data
data = merge(data, data, by = NULL)
data
colnames(data) = c("Source", "Target")
data = data.table(data)
data
library(data.table)
library(ggplot2)
data = data.table(Source = c("A", "B", "C", "D"))
data = merge(data, data, by = NULL)
data2 = copy(data)
data = data.table(Source = c("A", "B", "C", "D"))
data2 = copy(data)
setnames(data2, "Source", "Target")
data = merge(data, data2)
data = merge(data, data2, allow.cartesian = TRUE)
data = merge(data, data2, by = NULL, allow.cartesian = TRUE)
data = data.frame(Source = c("A", "B", "C", "D"))
data = merge(data, data, by = NULL)
colnames(data) = c("Source", "Target")
data = data.table(data)
data
data[, report := rpois(16, lambda = 4)]
data
data = data[Source != Target, ]
data
data[Source == A, ]
data[Source == "A", ]
data[Target == "A", ]
data
data = data.frame(Source = c("A", "B", "C", "D"))
data = merge(data, data, by = NULL)
colnames(data) = c("Source", "Target")
data = data.table(data)
data
data = data.frame(Source = 1:4)
data = merge(data, data, by = NULL)
colnames(data) = c("Source", "Target")
data = data.table(data)
data
data[, report := 10 - Source - Target]
data
data[, report := 10 - 2*(Source - Target)]
data
data[, report := 10 - 2*abs(Source - Target)]
data
data[Source == 1, ]
data[Target == 1, ]
data = data[Source != Target, ]
data[Source == 1, ]
data[Target == 1, ]
data[Source == 1, report := sample(report)]
data[Source == 1, ]
data[Target == 1, ]
data
dataOut = data[Source > Target, ]
dataOut
dataIn = data[Source < Target, ]
dataIn
dataOut[dataIn, ]
setkeyv(data, cols = c("Source", "Target"))
dataOut = data[Source > Target, ]
dataIn = data[Source < Target, ]
dataOut
dataIn
dataOut[Source == dataIn$Target, ]
dataOut[Source == dataIn$Target & Target == dataIn$Source, ]
dataOut
dataOut
dataIn
data
data[, Connected := 0]
data[, Connected := 0]
for(i in unique(data$Source)){
for(j in unique(data$Target)){
if(data[Source == i & Target == j, report] ==
data[Source == j & Target == i, report]){
data[Source == i & Target == j, Connected := 1]
data[Source == j & Target == i, Connected := 1]
}
}
}
data[Source == i & Target == j, report] ==
data[Source == j & Target == i, report]
data[Source == i & Target == j, report]
i
j
data[Source == i,]
data[Source == i & Target == j,]
data[, Connected := 0]
for(i in 1:3){
for(j in (i+1):4){
if(data[Source == i & Target == j, report] ==
data[Source == j & Target == i, report]){
data[Source == i & Target == j, Connected := 1]
data[Source == j & Target == i, Connected := 1]
}
}
}
data
pageRank = data.table(Node = 1:4, Rank = .25)
pageRank
data[Source == 1,]
pageRank = data.table(Node = 1:4, Rank = .25, newRank = NA)
pageRank
data[Source == 1, ]
data[Source == i & Connected, ]
i = 1
data[Source == i & Connected, ]
data[Source == i & Connected, Target]
agreeTargets = data[Source == i & Connected, Target]
agreeTargets
newRank[agreeTargets]
newRank = rep(0, 4)
newRank[agreeTargets]
1/length(agreeTargets)
newRank[agreeTargets] = newRank[agreeTargets] + 1/length(agreeTargets)
newRank
pageRank
pageRank[Node == i, Rank]
newRank = rep(0, 4)
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == i, Rank]/length(agreeTargets)
newRank
pageRank = data.table(Node = 1:4, Rank = .25)
pageRank
newRank = rep(0, 4)
for(j in 1:4){ #Nodes
agreeTargets = data[Source == i & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == i, Rank]/length(agreeTargets)
}
newRank
newRank = rep(0, 4)
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank
newRank = pageRank[, rank[
newRank = pageRank[, Rank]
newRank
j = 1
agreeTargets = data[Source == j & Connected, Target]
agreeTargets
newRank[agreeTargets]
newRank[agreeTargets]
pageRank[Node == j, Rank]/length(agreeTargets)
newRank = pageRank[, Rank]
j = 1
newRank
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
newRank
pageRank[, Rank := newRank]
pageRank
newRank = pageRank[, Rank]
newRank
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
newRank
pageRank[, Rank := newRank]
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
pageRank
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
pageRank
.15+.26+.26+.31
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
pageRank
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
pageRank
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
pageRank
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
pageRank
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
pageRank
saveRank = data.table(Time = rep(1:100, each = 4),
Node = rep(1:4, times = 100))
saveRank
pageRank
saveRank = data.table(Time = rep(1:100, each = 4),
Node = rep(1:4, times = 100),
Value = NA)
saveRank
pageRank
saveRank[Time == i, Value := pageRank[, Rank]]
saveRank = data.table(Time = rep(1:100, each = 4),
Node = rep(1:4, times = 100),
Value = NA_real_)
for(i in 1:100){ #iterations
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
saveRank[Time == i, Value := pageRank[, Rank]]
}
saveRank
toPlot = melt(saveRank, measure.vars = "Value")
toPlot
head(toPlot)
saveRank
ggplot(toPlot, aes(x = Time, y = Value, color = Node, group = Node)) +
geom_line()
ggplot(saveRank, aes(x = Time, y = Value, color = Node, group = Node)) +
geom_line()
pageRank = data.table(Node = 1:4, Rank = .25)
saveRank = data.table(Time = rep(1:100, each = 4),
Node = rep(1:4, times = 100),
Value = NA_real_)
# dampeningFactor = .85
for(i in 1:100){ #iterations
newRank = pageRank[, Rank]
for(j in 1:4){ #Nodes
agreeTargets = data[Source == j & Connected, Target]
newRank[agreeTargets] = newRank[agreeTargets] +
pageRank[Node == j, Rank]/length(agreeTargets)
newRank[j] = newRank[j] - pageRank[Node == j, Rank]
}
pageRank[, Rank := newRank]
saveRank[Time == i, Value := pageRank[, Rank]]
}
ggplot(saveRank, aes(x = Time, y = Value, color = Node, group = Node)) +
geom_line()
saveRank[, Node := factor(Node)]
ggplot(saveRank, aes(x = Time, y = Value, color = Node, group = Node)) +
geom_line()
data = data.frame(Source = 1:5)
data = data.frame(Source = 1:6)
data = merge(data, data, by = NULL)
colnames(data) = c("Source", "Target")
data = data.table(data)
data
data[, report := 10 - 2*abs(Source - Target)]
data
data = data[Source != Target, ]
data[Source == 1, ]
data[Target == 1, ]
sample(nrow(data), size = 7)
data[sample(nrow(data), size = 7), 4]
data[sample(nrow(data), size = 7), report := 4]
data
data[Source == 1, ]
data[Target == 1, ]
data = data.frame(Source = 1:6)
data = merge(data, data, by = NULL)
colnames(data) = c("Source", "Target")
data = data.table(data)
data[, report := 10 - 2*abs(Source - Target)]
data = data[Source != Target, ]
data[Source == 1, ]
data[Target == 1, ]
data[sample(nrow(data), size = 7), report := 4]
data[Source == 1, ]
data[Target == 1, ]
data[, Connected := 0]
for(i in 1:3){
for(j in (i+1):4){
if(data[Source == i & Target == j, report] ==
data[Source == j & Target == i, report]){
data[Source == i & Target == j, Connected := 1]
data[Source == j & Target == i, Connected := 1]
}
}
}
pageRank = data.table(Node = 1:4, Rank = .25)
data
nNode = 6
data = data.frame(Source = 1:nNode)
data = merge(data, data, by = NULL)
colnames(data) = c("Source", "Target")
data = data.table(data)
data[, report := 10 - 2*abs(Source - Target)]
data = data[Source != Target, ]
data[Source == 1, ]
data[Target == 1, ]
data[sample(nrow(data), size = 7), report := 4]
data[Source == 1, ]
data[Target == 1, ]
y = rnorm(100)
x = matrix(1, nrow = NROW(y))
robust = T
method = "nlminb"
w = rep(1, 100)
alpha = .01
start = NULL
if(any(is.na(y))){
if(is.null(dim(y)))
filt = !is.na(y)
else
filt = !apply(y, 1, function(x){any(is.na(x))})
x = x[filt, ]
w = w[filt]
if(is.null(dim(y)))
y = y[filt]
else
y = y[filt, ]
}
if(!is(x, "matrix"))
stop("x must be a matrix!")
if(!is.matrix(y) & !is.numeric(y))
stop("y must be a matrix or numeric vector!")
if(!is(robust,"logical"))
stop("robust must be a logical!")
if(nrow(x) != NROW(y))
stop("x and y must have the same number of observations!")
if(!is.numeric(w))
stop("w must be numeric!")
if(length(w) != nrow(x))
stop("w must have the same length as ncol(x)!")
if(length(method) > 1)
method = method[1]
if(!method %in% c("nlminb", "constrOptim"))
stop("method must be one of nlminb or constrOptim!")
n = nrow(x)
p = ncol(x)
d = NCOL(y)
nw = sum(w)
d == 1
ls <- lm.wfit(x, y, w)
res <- ls$residuals
s <- sqrt(sum(w * res^2)/nw)
gamma1 <- sum(w * res^3)/(nw * s^3)
gamma2 <- sum(res^4)/(nw * s^4) - 3
cp <- c(ls$coef, s, gamma1, gamma2)
dp <- st.cp2dp(cp, silent = TRUE)
library(sn)
dp <- st.cp2dp(cp, silent = TRUE)
getwd()
setwd("C:/Users/rockc_000/Documents/GitHub/MCLE/Robust-Skew-t/robustST/R/")
for(file in list.files()) source(file )
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/robustST.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
for(file in list.files()) source(file )
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/robustST_changing_k.R', echo=TRUE)
st.pdev.robust
for(file in list.files()) source(file )
st.pdev.robust
st.pdev.robust(c(0,1,0,100), x, y)
st.pdev
sn:::st.pdev
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/st.pdev.robust.R', echo=TRUE)
st.pdev.robust(c(0,1,0,100), x, y)
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/st.pdev.robust.R', echo=TRUE)
st.pdev.robust(c(0,1,0,100), x, y)
sn:::st.pdev
?sn:::st.pdev
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/st.pdev.robust.R', echo=TRUE)
st.pdev.robust(c(0,1,0,100), x, y)
st.pdev.robust(c(0,1,0,100), x, y)
st.pdev.robust(c(0,1,0,1000), x, y)
x
y
dp = c(0, 1, 0, 1000)
nonRobust = lapply(y, sn:::st.pdev, dp = dp, x = x, w = rep(1, NROW(y)))
nonRobust
sn:::st.pdev(dp = dp, x = x, y = y, w = rep(1,100))
mapply
nonRobust = mapply(sn:::st.pdev, y = y, dp = dp, x = x, w = 1)
nonRobust = mapply(sn:::st.pdev, y = y, dp = dp, x = x, w = rep(1, NROW(y)))
y
args(sn:::st.pdev)
mapply(sum, x = x, y = y)
mapply(sum, x = x, y = y, z = x)
args(mapply)
?mapply
nonRobust = mapply(sn:::st.pdev, y = y, x = x, MoreArgs = list(dp = dp, w = 1))
nonRobust = mapply(sn:::st.pdev, y = y, MoreArgs = list(dp = dp, w = 1))
nonRobust = mapply(sn:::st.pdev, y = y, MoreArgs = list(x = 1, dp = dp, w = 1))
nonRobust = mapply(sn:::st.pdev, y = y, MoreArgs = list(x = 1, dp = dp))
nonRobust = mapply(sn:::st.pdev, y = y, MoreArgs = list(x = 1))
nonRobust = mapply(sn:::st.pdev, y = y, MoreArgs = list(x = 1, dp = dp))
nonRobust = mapply(sn:::st.pdev, y, MoreArgs = list(x = 1, dp = dp))
sn:::st.pdev
x
p = ncol(x)
dp[1:p]
sn:::st.pdev
dp
dp[1:p]
x[i,]
is(x[i, ])
nonRobust = sapply(1:length(y), sn:::st.pdev, y = y[i], x = x[i,], dp = dp, w = 1)
nonRobust = sapply(1:length(y), sn:::st.pdev, y = y[i], x = x[i, , drop = FALSE], dp = dp, w = 1)
nonRobust
nonRobust = sapply(1:length(y), sn:::st.pdev, y = y[i],
x = x[i, , drop = FALSE], dp = dp, w = 1)
robust = ifelse(nonRobust > k, sapply(nonRobust, Psi, k = k), nonRobust)
k = 2
robust = ifelse(nonRobust > k, sapply(nonRobust, Psi, k = k), nonRobust)
robust
nonRobust = sapply(1:length(y), sn:::st.pdev, y = y[i],
x = x[i, , drop = FALSE], dp = dp, w = 1)
nonRobust
st.pdev.robust(c(0,1,0,1000), x, y)
source('~/GitHub/MCLE/Robust-Skew-t/robustST/R/st.pdev.robust.R', echo=TRUE)
st.pdev.robust(c(0,1,0,1000), x, y)
st.pdev.robust(c(0,1,0,100), x, y)
st.pdev.robust(c(0,1,0,100), x, y, k = 3)
st.pdev.robust(c(0,1,0,100), x, y, k = 1)
st.pdev.robust(c(0,1,0,100), x, y, k = 10)
st.pdev.robust(c(0,1,1,100), x, y, k = 10)
st.pdev.robust(c(0,1,-1,100), x, y, k = 10)
source("~/GitHub/Italian/runVocab.R")
head(vocabFile, 30)
source("~/GitHub/Italian/runVocab.R")
