token = "66984d62-6add-4ad4-bdf3-5d8538bb2b70")
usAupusParam = getAupusParameter(areaCode = "231", assignGlobal = FALSE,
yearsToUse = 2009:2013)
US = getAupusDataset(aupusParam = usAupusParam)
plotCommodityTree(US$shareData)
US = subsetAupus(aupusData = US, itemKeys = c(71, 72, 73),
aupusParam = usAupusParam)
aupusNetwork = suaToNetworkRepresentation(dataList = US,
aupusParam = usAupusParam)
names(aupusNetwork)
sapply(aupusNetwork, class)
sapply(aupusNetwork, dim)
plotCommodityTree(US$shareData, edge.arrow.size = 2, vertex.size = 25)
aupusNetwork$nodes[, .(geographicAreaFS, timePointYearsSP, measuredItemFS)]
colnames(aupusNetwork$nodes)
aupusNetwork$edges[, .(geographicAreaFS, timePointYearsSP,
measuredItemParentFS, measuredItemChildFS)]
colnames(aupusNetwork$edges)
nodes = aupusNetwork$nodes
edges = aupusNetwork$edges
from = usAupusParam$keyNames$itemParentName
to = usAupusParam$keyNames$itemChildName
processingLevelData = edges[, findProcessingLevel(.SD, from = from,
to = to, aupusParam = usAupusParam),
by = c(usAupusParam$keyNames$areaName, usAupusParam$keyNames$yearName)]
setkeyv(processingLevelData, key(nodes))
nodes[processingLevelData, `:=`(processingLevel, i.processingLevel)]
invisible(nodes[is.na(processingLevel), processingLevel := 0])
nodes[, c(key(nodes), "processingLevel"), with = FALSE]
nodes = aupusNetwork$nodes
edges = aupusNetwork$edges
from = usAupusParam$keyNames$itemParentName
to = usAupusParam$keyNames$itemChildName
processingLevelData = edges[, findProcessingLevel(.SD, from = from,
to = to, aupusParam = usAupusParam),
by = c(usAupusParam$keyNames$areaName, usAupusParam$keyNames$yearName)]
findProcessingLevel
source('~/Documents/SVN/RModules/faoswsAupus/R/findProcessingLevel.R')
nodes = aupusNetwork$nodes
edges = aupusNetwork$edges
from = usAupusParam$keyNames$itemParentName
to = usAupusParam$keyNames$itemChildName
processingLevelData = edges[, findProcessingLevel(.SD, from = from,
to = to, aupusParam = usAupusParam),
by = c(usAupusParam$keyNames$areaName, usAupusParam$keyNames$yearName)]
setkeyv(processingLevelData, key(nodes))
nodes[processingLevelData, `:=`(processingLevel, i.processingLevel)]
invisible(nodes[is.na(processingLevel), processingLevel := 0])
nodes[, c(key(nodes), "processingLevel"), with = FALSE]
nodes[, Value_measuredElementFS_11]
960/4
230/11
52*5
240*4
calculateEle11
nodes[, Value_measuredElementFS_161]
nodes[, flagFaostat_measuredElementFS_11]
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle11.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle11.R')
nodes[, Value_measuredElementFS_11]
calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, Value_measuredElementFS_11]
faoswsAupus::calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, Value_measuredElementFS_11]
replaceable
source('~/Documents/SVN/RModules/faoswsAupus/R/replaceable.R')
replaceable("T", 0)
replaceable("T", 1)
replaceable("C", 1)
replaceable("M", 1)
replaceable("A", 1)
replaceable("M", 1)
replaceable("M", NA)
replaceable("C", NA)
replaceable("T", NA)
source('~/Documents/SVN/RModules/faoswsAupus/R/replaceable.R')
data
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle11.R')
nodes[, Value_measuredElementFS_11]
nodes[, Value_measuredElementFS_11 := c(12000, 23000, 20000, 20000, 20000, rep(NA, 10))]
nodes[, Value_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11 := c("", "", "", "T", "T", rep(NA, 10)]
nodes[, flagFaostat_measuredElementFS_11 := c("", "", "", "T", "T", rep(NA, 10))]
nodes[, flagFaostat_measuredElementFS_11]
nodes[, Value_measuredElementFS_11]
nodes[, c(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
t(nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)])
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
t(nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)])
nodes[, Value_measuredElementFS_11 := c(12000, 23000, 20000, 20000, 20000, rep(NA, 10))]
t(nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)])
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, .(Value_measuredElementFS_11, flagFaostat_measuredElementFS_11)]
nodes[, Value_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11]
calculateEle11(data = nodes, aupusParam = usAupusParam)
nodes[, Value_measuredElementFS_11]
nodes[, flagFaostat_measuredElementFS_11]
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
calculateEle21
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle21.R')
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
calculateEle21(data = nodes, aupusParam = usAupusParam)
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle21.R')
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
calculateEle21(data = nodes, aupusParam = usAupusParam)
nodes[, Value_measuredElementFS_11]
nodes[, Value_measuredElementFS_21]
nodes[, flagFaostat_measuredElementFS_21]
nodes[, Value_measuredElementFS_31]
nodes[, flagFaostat_measuredElementFS_31]
calculateEle31
replaceable
nodes[, Value_measuredElementFS_31]
nodes[, flagFaostat_measuredElementFS_31]
calculateEle31(data = nodes, aupusParam = usAupusParam)
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle71.R')
1/0
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle93.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle93.R')
source('~/.active-rstudio-document')
computed.mat = matrix(c(NA, NA, NA, NA))
computed.mat
computed.mat = matrix(c(NA, NA, NA, NA), nrow = 1)
computed.mat
apply(computed.mat, 1, FUN = function(x) na.omit(x)[1])
subData[, get(element21Num)]
vec = 1:10
vec[2:11]
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle111.R')
source('~/.active-rstudio-document')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle141.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle141.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle144.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle151.R', echo=TRUE)
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle151.R')
source('~/Documents/SVN/RModules/faoswsAupus/R/calculateEle161.R')
Rseek
install.packages("Rseek")
library(faosws)
library(ggplot2)
library(scales)
library(faoswsImputation)
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
## Just use any valid token, we only need the general swsContext parameters
token = "66984d62-6add-4ad4-bdf3-5d8538bb2b70")
areaCode = GetCodeList(domain = "suafbs", dataset = "fbs",
dimension = "geographicAreaM49")[type == "country", code]
# elementCode = GetCodeList(domain = "suafbs", dataset = "fbs",
#                           dimension = "measuredElementSuaFbs")$code
conversionElements = c("645", "664")
elementCode = conversionElements
itemCode = GetCodeList(domain = "suafbs", dataset = "fbs",
dimension = "measuredItemSuaFbs")$code
yearCode = GetCodeList(domain = "suafbs", dataset = "fbs",
dimension = "timePointYears")$code
areaDimension = Dimension(name = "geographicAreaM49", keys = areaCode)
elementDimension = Dimension(name = "measuredElementSuaFbs",
keys = elementCode)
itemDimension = Dimension(name = "measuredItemSuaFbs", keys = itemCode)
yearDimension = Dimension(name = "timePointYears", keys = yearCode)
key = DatasetKey(domain = "suafbs", dataset = "fbs",
dimensions = list(areaDimension, elementDimension,
itemDimension, yearDimension))
pivot = list(Pivoting(code = "geographicAreaM49"),
Pivoting(code = "measuredItemSuaFbs"),
Pivoting(code = "timePointYears"),
Pivoting(code = "measuredElementSuaFbs"))
calorieHistory = GetData(key = key, flags = FALSE, normalized = FALSE,
pivoting = pivot)
load(file = "~/Documents/Github/Working/calorieHistory.RData")
calorieHistory = calorieHistory[kcalToKg < Inf, ]
## Create the imputation parameters, modify to work with our current data
params = defaultImputationParameters(variable = "yield")
params$imputationValueColumn = "kcalToKg"
params$imputationFlagColumn = "kcalToKg_flag"
params$imputationMethodColumn = "kcalToKg_method"
params$byKey = c("geographicAreaM49", "measuredItemSuaFbs")
calorieHistory[, kcalToKg_flag := ""]
calorieHistory[, kcalToKg_method := "-"]
toBind = calorieHistory[, .(timePointYears = c(2012:2020), kcalToKg = NA_real_,
kcalToKg_flag = "M"),
by = c("geographicAreaM49", "measuredItemSuaFbs",
"kcalToKg_method")]
toBind = toBind[, .(geographicAreaM49, measuredItemSuaFbs, timePointYears,
kcalToKg, kcalToKg_flag, kcalToKg_method)]
calorieHistory[, `:=`(c("foodSupplyKg", "foodSupplyKcal"), NULL)]
calorieHistory = rbind(calorieHistory, toBind)
params$ensembleModels = params$ensembleModels[
c("defaultMean", "defaultLm","defaultExp", "defaultLoess",
"defaultArima", "defaultMars", "defaultNaive")]
calorieHistory
toBind = merge(data.frame(geographicAreaM49 =
unique(calorieHistory$geographicAreaM49)),
data.frame(measuredItemSuaFbs =
unique(calorieHistory$measuredItemSuaFbs)),
data.frame(timePointYears =
unique(calorieHistory$timePointYears)))
?Reduce
toBind = Reduce(f = merge, x = list(
data.frame(geographicAreaM49 = unique(calorieHistory$geographicAreaM49)),
data.frame(measuredItemSuaFbs = unique(calorieHistory$measuredItemSuaFbs)),
data.frame(timePointYears = unique(calorieHistory$timePointYears))))
dim(toBind)
?CJ
calorieHistory[CJ(unique(geographicAreaM49), unique(measuredItemSuaFbs),
unique(timePointYears))]
setkeyv(calorieHistory, c("geographicAreaM49", "measuredItemSuaFbs",
"timePointYears")]
setkeyv
calorieHistory
setkey(calorieHistory, c("geographicAreaM49", "measuredItemSuaFbs",
"timePointYears")]
setkeyv(calorieHistory, c("geographicAreaM49", "measuredItemSuaFbs",
"timePointYears"))
key(calorieHistory)
calorieHistory[CJ(unique(geographicAreaM49), unique(measuredItemSuaFbs),
unique(timePointYears))]
calorieHistory = calorieHistory[CJ(unique(geographicAreaM49),
unique(measuredItemSuaFbs),
unique(timePointYears))]
calorieHistory
library(faoswsImputation)
defaultImputationParameters()
defaultImputationParameters(variable = "yield")
temp = defaultImputationParameters(variable = "yield")
temp$ensembleModels
names(temp$ensembleModels)
temp$ensembleModels$defaultLm
temp$ensembleModels[[10]]
glm( c(1, 2, 4) ~ c(1,2,3), family = "exponential")
fit = glm( c(1, 2, 4) ~ c(1,2,3), family = exponential)
?glm
fit = glm( c(1, 2, 4) ~ c(1,2,3), link = log)
fit = glm( c(1, 2, 4) ~ c(1,2,3), family = gaussian(link = log_)
fit = glm( c(1, 2, 4) ~ c(1,2,3), family = gaussian(link = log))
fit
predict(fit, newdata = 1:13)
predict(fit, newdata = data.frame(x  = 1:13))
x = 1:3
y = c(1, 2, 4)
fit = glm(y ~ x, family = gaussian(link = log))
fit
predict(fit, newdata = data.frame(x  = 1:13))
predict(fit, newdata = data.frame(x  = 1:13), type = "response")
predict(fit, newdata = data.frame(x  = 1:23), type = "response")
computeEnsembleWeight
computeEnsemble
computeEnsembleWeight
sn:::dplist2optpar
st.pdev.robust
mst.pdev.grad
sn:::mst.pdev.grad
y = rnorm(100)
x = 1:100
glm(y ~ x)
args = list(family = "binomial")
glm(y ~ x, args)
do.call(args, formula = "y ~ x")
do.call("glm", args, formula = y ~ x)
?do.call
param
family = "ST"
dimension = 2
robust = TRUE
if(! family %in% c("N", "T", "SN", "ST"))
stop("Invalid family provided.  Must be 'N', 'T', 'SN' or 'ST'")
if(family == "N"){
args = list(symmetr = TRUE, fixed.nu = Inf)
paramAdj = function(param, d){
c(param, rep(0, d), Inf)
}
} else if(family == "T"){
args = list(symmetr = TRUE)
paramAdj = function(param, d){
c(param[-length(param)], rep(0, d), param[length(param)])
}
} else if(family == "SN"){
args = list(fixed.nu = Inf)
paramAdj = function(param, d){
c(param, Inf)
}
} else if(family == "ST"){
args = list()
paramAdj = function(param, d) param
} else {
stop("Current family not yet implemented")
}
args
paramAdj
density = function(param, y, k){
param = paramAdj(param)
args = c(args, y = y, k = k, param = param)
do.call("mst.pdev.robust", args = args)
}
density
family = "N"
if(! family %in% c("N", "T", "SN", "ST"))
stop("Invalid family provided.  Must be 'N', 'T', 'SN' or 'ST'")
## The distribution family influences the passed parameters.  A normal dist
## can be created by forcing symmetry and fixing nu to Inf, for example.
if(family == "N"){
args = list(symmetr = TRUE, fixed.nu = Inf)
paramAdj = function(param, d){
c(param, rep(0, d), Inf)
}
} else if(family == "T"){
args = list(symmetr = TRUE)
paramAdj = function(param, d){
c(param[-length(param)], rep(0, d), param[length(param)])
}
} else if(family == "SN"){
args = list(fixed.nu = Inf)
paramAdj = function(param, d){
c(param, Inf)
}
} else if(family == "ST"){
args = list()
paramAdj = function(param, d) param
} else {
stop("Current family not yet implemented")
}
density = function(param, y, k){
param = paramAdj(param)
args = c(args, y = y, k = k, param = param)
do.call("mst.pdev.robust", args = args)
}
density
density(param = c(0, 1), rnorm(100), k = -Inf)
setwd("~/Documents/Github/Robust-Skew-t/robustST/R")
for(file in dir())
source(file)
density(param = c(0, 1), rnorm(100), k = -Inf)
density
mst.pdev.robust
source('~/Documents/Github/Robust-Skew-t/robustST/R/mst.pdev.robust.R')
density(param = c(0, 1), rnorm(100), k = -Inf)
density
density(param = c(0, 1), y = rnorm(100), k = -Inf)
param = c(0, 1)
y = rnorm(100)
k = -Inf
param
y
k
param = paramAdj(param)
param
args = c(args, y = y, k = k, param = param)
args
args
defaultArgs
defaultArgs = list(symmetr = TRUE, fixed.nu = Inf)
defaultArgs
list(defaultArgs, y = y, k = k, param = param)
c(defaultArgs, list(y = y, k = k, param = param))
density = function(param, y, k){
param = paramAdj(param)
args = c(defaultArgs, list(y = y, k = k, param = param))
do.call("mst.pdev.robust", args = args)
}
density(param = c(0, 1), y = rnorm(100), k = -Inf)
param
y
k
param = paramAdj(param)
param
param = c(0, 1, 0, Inf)
args = c(defaultArgs, list(y = y, k = k, param = param))
args
mst.pdev.robust
do.call("mst.pdev.robust", args = args)
mst.pdev.robust(param = param, y = y, k = -Inf)
param
dp = sn:::optpar2dplist(param = param, p = 1, d = 1)$dp
dp
nonRobust = -2 * log(dmst(x = y, dp = dp))
nonRobust
log(dmst(x = y, dp = dp))
nonRobust > k
y
dmst(x = y, dp = dp)
y
dmst(y, dp = dp)
nonRobust = -2 * log(sapply(y, dmst, dp = dp))
nonRobust
nonRobust > k
Psi
Psi(nonRobust, k = k)
k = Inf
Psi(nonRobust, k = k)
source('~/Documents/Github/Robust-Skew-t/robustST/R/mst.pdev.robust.R')
sum(robust)
robust
robust = ifelse(nonRobust > k, Psi(nonRobust, k = k), nonRobust)
robust
sum(robust)
source('~/Documents/Github/Robust-Skew-t/robustST/R/mst.pdev.robust.R')
density(param = c(0, 1), y = rnorm(100), k = 10)
density(param = c(0, 1), y = rnorm(100), k = 9)
density(param = c(0, 1), y = rnorm(100), k = 1)
density(param = c(0, 1), y = rnorm(100), k = -10)
density = function(param, y, k){
param = paramAdj(param)
args = c(defaultArgs, list(y = y, k = k, param = param,
w = rep(1, NROW(y)),
x = matrix(1, NROW(y))))
do.call("mst.pdev", args = args)
}
density(c(0, 1), rnorm(100), 10)
density = function(param, y, k){
param = paramAdj(param)
args = c(defaultArgs, list(y = y, param = param,
w = rep(1, NROW(y)),
x = matrix(1, NROW(y))))
do.call("mst.pdev", args = args)
}
density(c(0, 1), rnorm(100), 10)
mst.pdev
args(mst.pdev)
mst.pdev(param = c(0, 1, 0, Inf), x = matrix(1, 100), y = rnorm(100), w = rep(1, 100))
source('~/Documents/Github/Robust-Skew-t/robustST/R/mst.pdev.R')
mst.pdev(param = c(0, 1, 0, Inf), x = matrix(1, 100), y = rnorm(100), w = rep(1, 100))
param = c(0, 1, 0, Inf)
x = matrix(1, 100)
y = rnorm(100)
w = rep(1, 100))
x = matrix(1, 100)
y = rnorm(100)
w = rep(1, 100)
args
fixed.nu = Inf
symmetr = TRUE
if (missing(w))
w <- rep(1, nrow(y))
d <- NCOL(y)
p <- ncol(x)
npar0 <- (p * d + d * (d + 1)/2)
param1 <- c(param[1:npar0], if (symmetr) rep(0, d) else param[npar0 +
(1:d)], if (is.null(fixed.nu)) param[length(param)])
dp.list <- sn:::optpar2dplist(param1, d, p)
dp <- dp.list$dp
nu <- if (is.null(fixed.nu)){
dp$nu
} else {
fixed.nu
}
logL <- sum(w * dmst(x = y, xi = x %*% dp$beta, Omega = dp$Omega,
alpha = dp$alpha, nu = nu, log = TRUE))
x %*% dp$beta
dp$beta
dp$Omega
dp$alpha
nu
dmst(x = y, xi = x %*% dp$beta, Omega = dp$Omega,
alpha = dp$alpha, nu = nu, log = TRUE)
x = y
xi = x %*% dp$beta
Omega = dp$Omega
alpha = dp$alpha
log = TRUE
if (!(missing(alpha) & missing(Omega)) && !is.null(dp))
stop("You cannot set both component parameters and dp")
d <- length(alpha)
Omega <- matrix(Omega, d, d)
if (!all(Omega - t(Omega) == 0))
return(NA)
invOmega <- mnormt:::pd.solve(Omega, silent = TRUE, log.det = TRUE)
if (is.null(invOmega))
return(NA)
logDet <- attr(invOmega, "log.det")
x <- if(is.vector(x)){
matrix(x, ncol = 1, nrow = length(x))
} else {
data.matrix(x)
}
x
if (is.vector(xi))
xi <- outer(rep(1, nrow(x)), xi)
x - xi
X <- t(x - xi)
Q <- colSums((invOmega %*% X) * X)
L <- as.vector(t(X/sqrt(diag(Omega))) %*% as.matrix(alpha))
if (nu < 10000) {
log.const <- lgamma((nu + d)/2) - lgamma(nu/2) - 0.5 *
d * logb(nu)
log1Q <- logb(1 + Q/nu)
} else {
log.const <- (-0.5 * d * logb(2) + log1p((d/2) * (d/2 -
1)/nu))
log1Q <- log1p(Q/nu)
}
log.dmt <- log.const - 0.5 * (d * logb(pi) + logDet + (nu +
d) * log1Q)
log.pt <- pt(L * sqrt((nu + d)/(Q + nu)), df = nu + d, log.p = TRUE)
logPDF <- logb(2) + log.dmt + log.pt
if (log){
return(logPDF)
} else {
return(exp(logPDF))
}
logPDF
